import { Blockfrost, Data, Lucid, SpendingValidator } from 'lucid-cardano';
import { useCallback, useEffect, useState } from 'react';
import { WalletApi } from 'lucid-cardano';


export const Action = Data.Enum([
  Data.Literal("KillDumb"),
  Data.Literal("SavePoints"),
]);
export type Action = Data.Static<typeof Action>;

export const Metadata = Data.Map(Data.Bytes(), Data.Any());
export type Metadata = Data.Static<typeof Metadata>;

export const DatumMetadata = Data.Object({
  metadata: Metadata,
  version: Data.Integer({ minimum: 1, maximum: 1 }),
  extra: Data.Any(),
});
export type DatumMetadata = Data.Static<typeof DatumMetadata>;



const useTransactionSender = (lucid?: Lucid) => {
  const [successMessage, setSuccessMessage] = useState<string>()
  const [error, setError] = useState<Error | undefined>()
  const [lovelace, setLovelace] = useState(0)
  const [toAccount, setToAccount] = useState("")

  useEffect(() => {
    if (!successMessage) return

    const timeout = setTimeout(() => setSuccessMessage(undefined), 5000)

    return () => clearTimeout(timeout)
  }, [successMessage])

  const sendTransaction = useCallback(async () => {
    if (!lucid || !toAccount || !lovelace) return

    try {
      /*const tx = await lucid
        .newTx()
        .payToAddress(toAccount, { lovelace: BigInt(lovelace) })
        .complete()

      const signedTx = await tx.sign().complete()

      const txHash = await signedTx.submit()*/

      const lucid1 = await Lucid.new(
        new Blockfrost(
          "https://cardano-preprod.blockfrost.io/api/v0",
          "preprod1QKBkJs3ZROHEYZ3244W77hXLHisUv6I",
        ),
        "Preprod",
      );
            
      const api = await window.cardano.eternl.enable();
      lucid1.selectWallet(api);


      const refNft = "1a18dffbeec82f5f7eae3afdb07acdb8a384c4f721bf4de8e1d4394d000643b04b454d493032"; // The label is not finalized yet!
  
      const [refUtxo] = await lucid.utxosAtWithUnit("addr_test1wz8xpgsytn2galzqutwulptd962plxu88sfww8ty7cjqtzs2nm5uz", refNft);
      
      const metadata: Metadata = {
        name: "KEMI02", 
        image: "ipfs://QmebgcoTQr1yETeGdVk3EPfdJPY3vZVqJzsCxHJcBpNASi" , 
        points : 22n, 
      }
      
      const datumMetadata = Data.to<DatumMetadata>({
        metadata: Data.castFrom<Metadata>(
          Data.fromJson(metadata),
          Metadata,
        ),
        version: 1n,
        extra: Data.from(Data.void()),
      }, DatumMetadata);
    
      const refScript: SpendingValidator ={
        type: "PlutusV2",
        script: "5909ed5909ea01000033232323232323232323232232222533300832323232323232323232323232323253330173370e002900009919191919299981098120010991919190009929998128008a50132533302600114a026464a6660500042646464646464646464a6660580022a666058a666058a66605866e1c01c0104cdc380399b8148001200214a0266e3c018038528099911919192999818a99981880188010a50100114a066e3ccc06400d2008488104000643b0003371e66030006900424504000de140003371e66048004900419812000a401000600c29400294ccc0accdc7802000899b8f00400f14a06eb8c0c4018dd7181818188029bad302f30303030004375c605c0086eb8c0b4c0b800cdd69816181698168011bac302b004375860540080022940c0a4004c0a0004c8c8c030004c040004dd59980b180b9980b180b803a400090041bae30250013025002375c60460022a6603c9201364c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e2069742065787065637465640016375860440026464600e00260160026eaccc044c048cc044c048005200248008c03000404488ccdc6240000020042a66602e66e1c00520021323232323232323232323322323232533302b302e0021323232323302b32533302b3370e00290000991919191919299981b181c801099819198178029191924c606e0046eb8c0d4005261533033491364c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e206974206578706563746564001630370013037002375a606a002606a0046eacc0cc004c08c00854cc0b52412b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e740016302d37540026464a66605866e20008ccc888c8c8c8cc0ccc94ccc0cccdc3800a40002646464646464a66607c60820042660746606e00a4646493181f8011bae303d00149854cc0ed2401364c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e2069742065787065637465640016303f001303f002375a607a002607a0046eacc0ec004c0ac00854cc0d52412b436f6e73747220696e64657820646964206e6f74206d6174636820616e7920747970652076617269616e74001630353754002640026eb4c8c8004c0e8004c0a8c94ccc0cccdc3a4000606c6ea8004400454cc0d524012a4173736572746564206f6e20696e636f727265637420636f6e7374727563746f722076617269616e742e0016330193756660526054002900024506706f696e7473003301700533028302900148010c0dc004c09cc94ccc0c0cdc3a400060666ea8004400454cc0c924012a4173736572746564206f6e20696e636f727265637420636f6e7374727563746f722076617269616e742e00163302337586604c604e0069002119b87333222323233223253330383370e00290010801099190009bad30400013030003303a37540040029000199119299981b99b87001480084cdd2a400497ae01323230040013756607e002605e00660726ea80080048cc88cc05c00800400400ccc88cc05c00800400c008dd5998139814000a4004006664466e28008005220104000643b0003302600248021200233023302400b480000180104004528198079bac33022302333022302300a480012010009375a64640026064002604464a66605666e1d2000302e375400220022a6605a9212a4173736572746564206f6e20696e636f727265637420636f6e7374727563746f722076617269616e742e0016330113756660426044002900024506706f696e7473003300f33020302100848000cc080c084cc080c084019200248010dd7181780098178011bae302d0011533028491364c6973742f5475706c652f436f6e73747220636f6e7461696e73206d6f7265206974656d73207468616e20697420657870656374656400163758605800264646022002602a0026eaccc06cc070cc06cc070005200248008c058008068074c0040048894ccc09c0084cdd2a400497ae013232323253330263371e00a002266e9520003302c375000497ae01333007007003005375c60500066eb4c0a0008c0ac00cc0a4008c0040048894ccc0940084cdd2a400497ae013232323253330243371e00a002266e9520003302a374c00497ae01333007007003005375c604c0066eacc098008c0a400cc09c008c0040048894ccc08c00852809919299981019b8f00200314a2266600a00a002006604e0066eb8c09400888c94ccc074cdc3800a40002c2a66603a66e1c0052002132323232001302700130173253330203370e900018119baa0011001153302249012a4173736572746564206f6e20696e636f727265637420636f6e7374727563746f722076617269616e742e00163300637566602c602e00a900a0009bae302500130150021323200130250013015002301f375400244660060040026002002444a66603e004266e9520024bd70099191919299980f19b8f00500113374a90001981200125eb804ccc01c01c00c014dd718100019810001181180198108010a5030193754020466644466600e006004002002444666444666010006004002004444660446e9ccc088dd4803198111ba900333022375000497ae00010014bd7018008009111299980e001880089919191919980300080119998040040018030029bae301d003375a603a0046040008603c00660020024444a666034006200226464646466600c002004666601001000600c00a6eb8c06c00cdd5980d801180f002180e001919000999119802001000800a441003001001222533301600214bd6f7b630099191919299980a99b8f005001100313301b337606ea4004dd30011998038038018029bae30170033756602e004603400660300044646464640026030002601064a66602266e1d20003014375400220022a6602692012a4173736572746564206f6e20696e636f727265637420636f6e7374727563746f722076617269616e742e00163300437586600e60106600e6010006900024000466ebccc020c02400520000023016001300632533300f3370e900118091baa001100115330114912a4173736572746564206f6e20696e636f727265637420636f6e7374727563746f722076617269616e742e001633005300600148008c0040048894ccc04c0084cdd2a400497ae0132325333010300300213374a90001980b00125eb804ccc01401400400cc05c00cc05400888ccdc600099b81371a00400200444646660020029000001911199980719b870040020152333004004337000069001180b800800918069baa001149858dd7000980080091129998048010a4c26600a600260160046660060066018004002ae695cdab9c5573aaae7955cfaba05742ae8930011e581c2d0a76fed6e930eceebffddd3160bb3268c0e03da85230d7f81d9a2d0001",
      };
      
      const tx = await lucid1.newTx()
        .collectFrom([refUtxo], Data.to<Action>("SavePoints", Action))
        .payToContract("addr_test1wz8xpgsytn2galzqutwulptd962plxu88sfww8ty7cjqtzs2nm5uz", datumMetadata, { [refNft]: 1n })
        .attachSpendingValidator(refScript)
        .addSigner("addr_test1qrj58j6n77ehv452ft5s96nylyxvkc2pw754uz5u3y2tp2dvv6n7yh85p7626lzfvvsclarja6smjcfvrhveatrc7p3qam38dk")
        .addSigner("addr_test1vqks5ah76m5npm8whl7a6vtqhvex3s8q8k59yvxhlqwe5tgkl6eyn")
        .complete();
    
      const user_w = await lucid1
        .fromTx(tx.toString())
        .partialSign();
  
      const protocol_w = await lucid1
            .selectWalletFromPrivateKey("ed25519_sk1t35qzvautllk0dy2c07n4js4g48x5gd2dl2qe98q87kne6zeprtquztjtp")
            .fromTx(tx.toString())
            .partialSign();
      
      
      const txAssemble = await lucid1
            .fromTx(tx.toString())
            .assemble([user_w,protocol_w])
            .complete();
    
      const txHash = await txAssemble.submit();

      setLovelace(0)
      setToAccount("")
      setSuccessMessage(`Transaction submitted with hash ${txHash}`)
    } catch (e) {
      if (e instanceof Error) setError(e)
      else console.error(e)
    }
  }, [lucid, toAccount, lovelace])

  const lovelaceSetter = useCallback((value: string) => {
    setError(undefined)
    setSuccessMessage(undefined)

    const parsed = parseInt(value)
    if (isNaN(parsed)) return
    setLovelace(parsed)
  }, [])

  const toAccountSetter = useCallback((value: string) => {
    setError(undefined)
    setSuccessMessage(undefined)
    setToAccount(value)
  }, [])

  return {
    error,
    successMessage,
    lovelace,
    setLovelace: lovelaceSetter,
    toAccount,
    setToAccount: toAccountSetter,
    sendTransaction,
  }
}

export { useTransactionSender }
